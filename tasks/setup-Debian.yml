- name: Set default database type if not provided
  set_fact:
    semaphore_db_type: "{{ semaphore_db_type | default('bolt') }}"

- name: Determine the compose template to use based on semaphore_db_type
  set_fact:
    compose_template: >-
      {{ 'compose-bolt.yml.j2' if semaphore_db_type == 'bolt'
         else ('compose-mysql.yml.j2' if semaphore_db_type == 'mysql'
         else ('compose-postgres.yml.j2' if semaphore_db_type == 'postgres'
         else 'compose-bolt.yml.j2')) }}

- name: Ensure "{{ semaphore_data_dir }}" directory exists.
  file:
    path: "{{ semaphore_data_dir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Ensure "{{ semaphore_config_dir }}" directory exists.
  file:
    path: "{{ semaphore_config_dir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Ensure "{{ semaphore_tmp_dir }}" directory exists.
  file:
    path: "{{ semaphore_tmp_dir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Ensure the "{{ semaphore_compose_dir }}" directory exists.
  file:
    path: "{{ semaphore_compose_dir }}"
    state: directory
    mode: '0755'

- name: Copy compose from "{{ compose_template }}".
  template:
    src: "{{ compose_template }}"
    dest: "{{ semaphore_compose_dir }}/docker-compose.yml"
  register: compose_deploy

- name: Check if image semaphore is running.
  shell: docker ps -q -f name=semaphore
  register: semaphore_running
  changed_when: false

- name: Handle compose file if state is UP.
  block:
    - name: Bring down semaphore container if running.
      shell: docker compose down
      args:
        chdir: "{{ semaphore_compose_dir }}"
      when: semaphore_running.stdout != ""

    - name: Prune unused docker containers.
      shell: docker container prune -f
      when: semaphore_running.stdout != ""

    - name: Start semaphore using docker.
      shell: docker compose up -d
      args:
        chdir: "{{ semaphore_compose_dir }}"
  when: compose_deploy.changed

- name: Start semaphore using docker.
  shell: docker compose up -d
  args:
    chdir: "{{ semaphore_compose_dir }}"
  when: not compose_deploy.changed

- name: Wait for semaphore container to be running.
  shell: docker inspect --format '{{ "{{" }}.State.Running{{ "}}" }}' semaphore
  register: container_status_final
  retries: 10
  delay: 10
  until: container_status_final.stdout | trim == "true"